Type coercion rules in JavaScript
1. Comparison between a boolean and a non-boolean value:
The boolean value true is considered greater than any non-boolean value (except NaN and undefined).
The boolean value false is considered less than any non-boolean value (except NaN and undefined).

console.log(true > 0); // true, because true is greater than 0
console.log(false < "1"); // true, because false is less than "1"
console.log(true > 1); // false, because true is converted to the number 1 for comparison and 1 is not greater than 1
console.log(false < "5"); // true, because false is converted to the number 0 and 0 is less than 5
console.log(true == "1"); // true, because "1" is converted to the number 1 and true has a numeric value of 1
console.log(true >= null); // true, because null is converted to 0 for comparison and true is equal to 1
console.log(true == "1"); // true, because "1" is converted to the number 1 and true has a numeric value of 1
console.log(false == "0"); // true, because "0" is converted to the number 0 and false has a numeric value of 0
console.log(true == 1); // true, because true has a numeric value of 1
console.log(false == ""); // true, because an empty string is converted to the number 0 and false has a numeric value of 0

2. Comparison between a number and a string:
If the string can be parsed as a valid number, it will be converted to a number and compared numerically.
If the string cannot be parsed as a valid number, it will be converted to NaN, and any comparison involving NaN will yield false except for NaN itself.

console.log(10 == "10"); // true, because "10" is converted to the number 10 for comparison
console.log(10 === "10"); // false, because the comparison is strict and the types are not equal
console.log(10 < "2"); // false, because "2" is converted to the number 2 and 10 is not less than 2
console.log(10 > "hello"); // false, because "hello" cannot be converted to a number and is therefore converted to NaN, any comparison involving NaN will yield false except for NaN itself
console.log(NaN == NaN); // false, because any comparison involving NaN will yield false except for NaN itself

3. Comparison between objects and primitive values:
When an object is compared to a primitive value, the object is converted to a primitive value using the valueOf() and toString() methods in a specific order:
The valueOf() method is called first, and if it returns a primitive value, that value is used for comparison.
If the valueOf() method does not return a primitive value, the toString() method is called, and if it returns a primitive value, that value is used for comparison.
If both valueOf() and toString() do not return a primitive value, a TypeError is thrown.

const obj = {
valueOf: function () {
return 3;
},
toString: function () {
return "5";
},
};

console.log(obj > 2); // true, because obj is converted to the number 3, which is greater than 2
console.log(obj == "5"); // true, because obj is converted to the string "5" using toString() method